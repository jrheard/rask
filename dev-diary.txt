7/13/21

ok!!!

TODO how do cargo workspaces work?

TODO where should i start?
    i'm thinking web api and postgres setup, i can test it manually w that http query vscode extension i saw in that one talk
        but i think i want to set up docker as part of that!!
        so i'll need to set up, like, images??
        augh i wish i still had that diamol book but it's downstairs

well, let's start with the web api bin crate
i can split out shared logic into a lib crate later

DONE pick a web framework
DONE hello world endpoint
TODO pick a sql library
TODO set up postgres in a docker container, publish the port to my local machine
    TODO set up a docker-compose.yaml
    TODO figure out persistent storage via a volume??

i can save dockerizing the webapp for later i think!

looks like you can have multiple binaries in the same workspace, https://stackoverflow.com/questions/36604010/how-can-i-build-multiple-binaries-with-cargo, cool
hm or maybe i would just use `cargo build --bin foo`
anyway neat

tbh i don't fully understand the utility of cargo workspaces
but i'll figure it out
and if i decide i don't actually want that here, i can always split em up
i think that having all my bins have access to the same lib will be useful though
and it'll be nice to not have to publish the lib via crates.io or similar each time it gets new code

ok, let's pick a web framework
https://www.lpalmieri.com/posts/2020-07-04-choosing-a-rust-web-framework-2020-edition/
actix-web is like flask, rocket is like django

i think i will go with rocket

coolcool, rocket is set up

i'm reading the docs now, https://rocket.rs/v0.5-rc/guide/introduction/

i'll look into sql libraries and postgres docker stuff next

i don't think i really need to read all this rocket stuff but i'm doing it anyway so far
might put it down partway through

request guards are interesting, i'll prob end up using that system for auth

i don't love how they use cutesy names for everything
rocket, launch, cookiejar, crumb
ick.

===

7/14/21

reading more docs

i dunno man, rocket seems pretty magical
in, like, the ruby sense

oh right, i've heard of diesel
it's an orm i can use w postgres?

https://rocket.rs/v0.5-rc/guide/pastebin/
this sounds interesting!

i think i'm going to need to get a local postgres set up before i can continue much farther

https://hub.docker.com/_/postgres

https://medium.com/analytics-vidhya/getting-started-with-postgresql-using-docker-compose-34d6b808c47c

ok i have a postgres docker image running locally
neat!

DONE how do i publish the port to my host machine?

holy cow this works
ðŸš‚  psql -h localhost -p 5000 --db=rask --user=postgres

sickkk

DONE set up rocket connection pooling

oh nice, the diesel docs have you use a lib called dotenv, seems like a great idea

installing the diesel cli
looks like i gotta write my first migration!!! aaa
i guess i could just read the docs first :p

TODO investigate diesel_migrations crate embed_migrations feature

whatever i'll just use int ids for now
i can play around w uuids later

TODO play around with uuids

ok cool so we're making progress
i'll keep reading the diesel docs

but then what next?
what's hello world?

TODO add a rocket POST endpoint that takes a body with name: String, saves it to the db, and returns a 200 w the id of the task

TODO use .env config instead of Rocket.toml

hm actually i think that echoing the name of a task by an id would be more of a hello world
i could just enter the task via psql

holy shit setting up rocket and diesel together is a total nightmare

i'm going to end up going to bed with this half-done
argh

ok i see
i was using u32s but i needed to use i32s
but the error messages were not helpful
oh well!

one error left: Responder trait not implemented for Task

aha! i think i need to use rocket_contrib
whatever that is

or not??? https://github.com/SergioBenitez/Rocket/issues/1107

ok, i think i need to specify the json feature of rocket
rocket = { version = "0.5.0-rc.1", features = ["json"] }

omg it workssssss

cool!

next up: go back and clean up the code + clean up whatever todos seem reasonable to clean up

===

7/16/21

ok! getting back to it

let's figure out how to get rid of this rocket.toml and use .env

ok, i used dotenv and figment, and it was really confusing
time to read their docs!!!

so many typesss

ok, dotenv is straightforward
dotenv() returns a Result that must be used, so you call .ok() to turn it into an Option and discard the error, if any
basically silencing an error if any exists, because apparently you don't usually use a .env file in prod
cool cool

so what in the HECK is up with figment? it seems totally nuts

oh wow, it's really recent - first commit nine months ago
like zero blog posts about it :/

my god there are so many domain specific terms in this lib

    Providers always produce Dicts nested in Profiles. A profile is selected
    when extracting, and the dictionary corresponding to that profile is
    deserialized into the requested type. If no profile is selected, the Default
    profile is used.

    ??????????

ok i think i can ignore profiles

in the future i'd be interested in reimplementing rask-api with actix-web

gosh
i've been working through https://www.perimeterx.com/tech-blog/2021/building-a-website-using-rust-rocket-diesel-and-askama-part-2/ this whole time
i wonder how he figured this all out!!

lucky thing for me that this blog post is so recent (april 2021)

ok cool cool cool
at this point i think i get the whole dotenv, figment, rocket, db pooling stuff
the .into()s are necessary because they convert eg `10` into a figment Value, gotcha
https://docs.rs/figment/0.10.5/src/figment/value/value.rs.html shows the implementation of that
neat macro!