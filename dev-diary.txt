7/13/21

ok!!!

TODO how do cargo workspaces work?

TODO where should i start?
    i'm thinking web api and postgres setup, i can test it manually w that http query vscode extension i saw in that one talk
        but i think i want to set up docker as part of that!!
        so i'll need to set up, like, images??
        augh i wish i still had that diamol book but it's downstairs

well, let's start with the web api bin crate
i can split out shared logic into a lib crate later

DONE pick a web framework
DONE hello world endpoint
TODO pick a sql library
TODO set up postgres in a docker container, publish the port to my local machine
    TODO set up a docker-compose.yaml
    TODO figure out persistent storage via a volume??

i can save dockerizing the webapp for later i think!

looks like you can have multiple binaries in the same workspace, https://stackoverflow.com/questions/36604010/how-can-i-build-multiple-binaries-with-cargo, cool
hm or maybe i would just use `cargo build --bin foo`
anyway neat

tbh i don't fully understand the utility of cargo workspaces
but i'll figure it out
and if i decide i don't actually want that here, i can always split em up
i think that having all my bins have access to the same lib will be useful though
and it'll be nice to not have to publish the lib via crates.io or similar each time it gets new code

ok, let's pick a web framework
https://www.lpalmieri.com/posts/2020-07-04-choosing-a-rust-web-framework-2020-edition/
actix-web is like flask, rocket is like django

i think i will go with rocket

coolcool, rocket is set up

i'm reading the docs now, https://rocket.rs/v0.5-rc/guide/introduction/

i'll look into sql libraries and postgres docker stuff next

i don't think i really need to read all this rocket stuff but i'm doing it anyway so far
might put it down partway through

request guards are interesting, i'll prob end up using that system for auth

i don't love how they use cutesy names for everything
rocket, launch, cookiejar, crumb
ick.

===

7/14/21

reading more docs

i dunno man, rocket seems pretty magical
in, like, the ruby sense

oh right, i've heard of diesel
it's an orm i can use w postgres?

https://rocket.rs/v0.5-rc/guide/pastebin/
this sounds interesting!

i think i'm going to need to get a local postgres set up before i can continue much farther

https://hub.docker.com/_/postgres

https://medium.com/analytics-vidhya/getting-started-with-postgresql-using-docker-compose-34d6b808c47c

ok i have a postgres docker image running locally
neat!

DONE how do i publish the port to my host machine?

holy cow this works
ðŸš‚  psql -h localhost -p 5000 --db=rask --user=postgres

sickkk

TODO set up rocket connection pooling

oh nice, the diesel docs have you use a lib called dotenv, seems like a great idea

installing the diesel cli
looks like i gotta write my first migration!!! aaa
i guess i could just read the docs first :p

TODO investigate diesel_migrations crate embed_migrations feature

whatever i'll just use int ids for now
i can play around w uuids later

TODO play around with uuids

ok cool so we're making progress
i'll keep reading the diesel docs

but then what next?
what's hello world?

TODO add a rocket POST endpoint that takes a body with name: String, saves it to the db, and returns a 200 w the id of the task

TODO use .env config instead of Rocket.toml

hm actually i think that echoing the name of a task by an id would be more of a hello world
i could just enter the task via psql

holy shit setting up rocket and diesel together is a total nightmare

i'm going to end up going to bed with this half-done
argh

ok i see
i was using u32s but i needed to use i32s
but the error messages were not helpful
oh well!

one error left: Responder trait not implemented for Task